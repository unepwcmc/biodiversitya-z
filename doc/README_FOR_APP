# Site overview

Biodiversity A-Z is essentially a glossary of biodiversity terms, which have a definition, and sometimes some images and references. The site provides a search bar, which returns documents using Sphinx as a search engine.

"The Biodiversity A-Z provides clear, concise and relevant information about various topics relating to biodiversity written and reviewed by experts. It is designed to be a useful reference to all sectors including business, government and environmental agencies. The content of the Biodiversity A-Z is structured around themes, each theme is divided into several categories, and in some cases, further divided into sub-categories. Searches throughout the website can be filtered by themes, categories or sub-categories."

# Technical Overview

# Search

The search uses Sphinx Search under the hood and the Thinking Sphinx gem layered over top to provide an Active::Record-like
interface. Sphink is similar to Elasticsearch.

# Letters

In order to easily display letters on each theme page and distinguish between those with terms and those without we've
introduced a Refinery::Terms::Letter model.  All 26 letters are created and associated with a theme in an after_create
callback.  The letter model has a counter cache for it's associated terms.

# Themes & Categories

Themes and categories are stored both instances of the Refinery::Terms::Theme model.  Nested Set is used to provide nested
set behaviour to the model allowing use of the standard set methods like: children, parent and siblings.  Themes, categories
and subcategories are distinguished by their depth attribute: 0 = themes, 1 = categories and 2 = subcategories.

## Master Theme

There is a many-to-many relationship between a term and themes however each term has one theme that is flagged as the master
theme.  This is modelled using an is_master boolean on the intermediate join model.  The introduction of this boolean has
enforced a couple of decisions.

When themes are associated with a term the form actually deals with the join models directly rather than the theme_ids as
you would normally expect in rails.  A before_filter attached to the update action clears all existing associations before
new ones are created.  An after_create hook on the join model checks for the is_master status and forces the counter_cache
on the associated letter to update.


# Project setup

A working local version was achieved with:
Ubuntu 14
Ruby 2.0.0
Sphinx 2.0.4-id64-release
MySQL 5.6
Postgres 9.3

Also needed to update the mysql gem to ```gem 'mysql2',  '0.4.10', :platform => :ruby``` in the gemfile.

## Sphinx setup

A Sphinx config is autogenerated when the rake tasks are run, e.g. ```rake ts:index```, ```rake ts:regenerate```
The ts:... tasks were not able to stop and restart sphinx, so i had to run ```sudo service sphinxsearch stop``` before running ```rake ts:index``` etc.
